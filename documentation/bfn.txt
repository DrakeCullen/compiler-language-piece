https://inst.eecs.berkeley.edu/~cs164/sp18/python-grammar.html

T string ::= '<character>{<character>}' | "<character>{<character>}"
T comment ::= '''{<character>}'''
T comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="
T keyword ::= "and" | "or" | "not" |   # Get more as needed
T intpart ::= digit{<digit>}
T m_operator ::= "*" | "/" | "//" | "%" 
T a_operator ::= "+" | "-"
T hexinteger ::=  "0" ("x" | "X") hexdigit+
T hexdigit ::= digit | "a"..."f" | "A"..."F"
T E ::= "e" | "E"

P fraction ::= DOT intpart
P <variable> ::= <letter > {<letter or digit>}
P pointfloat ::= {intpart} fraction | {intpart} DOT
P exponent ::= E a_operator intpart
exponentfloat ::= (intpart | pointfloat) exponent

integer ::= floatnumber | hexinteger
floatnumber ::= pointfloat | exponentfloat



expression ::=  conditional_expression
expression_list ::= expression ( "," expression )* [","]
expression_stmt ::= expression_list
conditional_expression ::= or_test ["if" or_test "else" expression]
or_test ::= and_test | or_test "or" and_test
and_test ::= not_test | and_test "and" not_test
not_test ::= comparison | "not" 
comparison ::= or_expr { comp_operator or_expr }


and_expr ::= a_expr | and_expr "&" a_expr
xor_expr ::= and_expr | xor_expr "^" and_expr
or_expr ::= xor_expr | or_expr "|" xor_expr
u_expr ::=  "-" u_expr | "+" u_expr 
m_expr ::=  u_expr | m_expr m_operator u_expr 
a_expr ::= m_expr | a_expr "+" m_expr| a_expr "-" m_expr
